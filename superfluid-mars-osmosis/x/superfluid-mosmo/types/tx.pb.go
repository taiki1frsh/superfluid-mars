// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/superfluid-mosmo/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSuperfluidmOsmoDelegate defines a message to delegate superfluid tokens
type MsgSuperfluidmOsmoDelegate struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgSuperfluidmOsmoDelegate) Reset()         { *m = MsgSuperfluidmOsmoDelegate{} }
func (m *MsgSuperfluidmOsmoDelegate) String() string { return proto.CompactTextString(m) }
func (*MsgSuperfluidmOsmoDelegate) ProtoMessage()    {}
func (*MsgSuperfluidmOsmoDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{0}
}
func (m *MsgSuperfluidmOsmoDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSuperfluidmOsmoDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSuperfluidmOsmoDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSuperfluidmOsmoDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSuperfluidmOsmoDelegate.Merge(m, src)
}
func (m *MsgSuperfluidmOsmoDelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSuperfluidmOsmoDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSuperfluidmOsmoDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSuperfluidmOsmoDelegate proto.InternalMessageInfo

func (m *MsgSuperfluidmOsmoDelegate) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSuperfluidmOsmoDelegate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgSuperfluidmOsmoDelegate) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgSuperfluidmOsmoDelegateResponse defines the Msg/Delegate response type
type MsgSuperfluidmOsmoDelegateResponse struct {
}

func (m *MsgSuperfluidmOsmoDelegateResponse) Reset()         { *m = MsgSuperfluidmOsmoDelegateResponse{} }
func (m *MsgSuperfluidmOsmoDelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSuperfluidmOsmoDelegateResponse) ProtoMessage()    {}
func (*MsgSuperfluidmOsmoDelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{1}
}
func (m *MsgSuperfluidmOsmoDelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSuperfluidmOsmoDelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSuperfluidmOsmoDelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSuperfluidmOsmoDelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSuperfluidmOsmoDelegateResponse.Merge(m, src)
}
func (m *MsgSuperfluidmOsmoDelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSuperfluidmOsmoDelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSuperfluidmOsmoDelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSuperfluidmOsmoDelegateResponse proto.InternalMessageInfo

// MsgSuperfluidmOsmoUndelegate defines a message to undelegate superfluid tokens
type MsgSuperfluidmOsmoUndelegate struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgSuperfluidmOsmoUndelegate) Reset()         { *m = MsgSuperfluidmOsmoUndelegate{} }
func (m *MsgSuperfluidmOsmoUndelegate) String() string { return proto.CompactTextString(m) }
func (*MsgSuperfluidmOsmoUndelegate) ProtoMessage()    {}
func (*MsgSuperfluidmOsmoUndelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{2}
}
func (m *MsgSuperfluidmOsmoUndelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSuperfluidmOsmoUndelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSuperfluidmOsmoUndelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSuperfluidmOsmoUndelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSuperfluidmOsmoUndelegate.Merge(m, src)
}
func (m *MsgSuperfluidmOsmoUndelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgSuperfluidmOsmoUndelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSuperfluidmOsmoUndelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSuperfluidmOsmoUndelegate proto.InternalMessageInfo

func (m *MsgSuperfluidmOsmoUndelegate) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSuperfluidmOsmoUndelegate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgSuperfluidmOsmoUndelegate) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgSuperfluidmOsmoUndelegateResponse defines the Msg/Undelegate response type
type MsgSuperfluidmOsmoUndelegateResponse struct {
}

func (m *MsgSuperfluidmOsmoUndelegateResponse) Reset()         { *m = MsgSuperfluidmOsmoUndelegateResponse{} }
func (m *MsgSuperfluidmOsmoUndelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSuperfluidmOsmoUndelegateResponse) ProtoMessage()    {}
func (*MsgSuperfluidmOsmoUndelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{3}
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSuperfluidmOsmoUndelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSuperfluidmOsmoUndelegateResponse.Merge(m, src)
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSuperfluidmOsmoUndelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSuperfluidmOsmoUndelegateResponse proto.InternalMessageInfo

// MsgReBalance defines a message to rebalance superfluid tokens
type MsgRebalance struct {
	Sender        string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	RebalanceRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rebalance_rate,json=rebalanceRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rebalance_rate" yaml:"rebalance_rate"`
}

func (m *MsgRebalance) Reset()         { *m = MsgRebalance{} }
func (m *MsgRebalance) String() string { return proto.CompactTextString(m) }
func (*MsgRebalance) ProtoMessage()    {}
func (*MsgRebalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{4}
}
func (m *MsgRebalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRebalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRebalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRebalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRebalance.Merge(m, src)
}
func (m *MsgRebalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgRebalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRebalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRebalance proto.InternalMessageInfo

func (m *MsgRebalance) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgReBalanceResponse defines the Msg/Rebalance response type
type MsgRebalanceResponse struct {
}

func (m *MsgRebalanceResponse) Reset()         { *m = MsgRebalanceResponse{} }
func (m *MsgRebalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRebalanceResponse) ProtoMessage()    {}
func (*MsgRebalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95cc729233209cd9, []int{5}
}
func (m *MsgRebalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRebalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRebalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRebalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRebalanceResponse.Merge(m, src)
}
func (m *MsgRebalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRebalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRebalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRebalanceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSuperfluidmOsmoDelegate)(nil), "osmosis.superfluidmosmo.MsgSuperfluidmOsmoDelegate")
	proto.RegisterType((*MsgSuperfluidmOsmoDelegateResponse)(nil), "osmosis.superfluidmosmo.MsgSuperfluidmOsmoDelegateResponse")
	proto.RegisterType((*MsgSuperfluidmOsmoUndelegate)(nil), "osmosis.superfluidmosmo.MsgSuperfluidmOsmoUndelegate")
	proto.RegisterType((*MsgSuperfluidmOsmoUndelegateResponse)(nil), "osmosis.superfluidmosmo.MsgSuperfluidmOsmoUndelegateResponse")
	proto.RegisterType((*MsgRebalance)(nil), "osmosis.superfluidmosmo.MsgRebalance")
	proto.RegisterType((*MsgRebalanceResponse)(nil), "osmosis.superfluidmosmo.MsgRebalanceResponse")
}

func init() {
	proto.RegisterFile("osmosis/superfluid-mosmo/v1beta1/tx.proto", fileDescriptor_95cc729233209cd9)
}

var fileDescriptor_95cc729233209cd9 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x16, 0x0a, 0x3b, 0xb8, 0xe2, 0x86, 0x75, 0xb7, 0x06, 0x49, 0x24, 0xac, 0x8b,
	0x8b, 0x24, 0x43, 0x5d, 0xf6, 0xe2, 0x9f, 0x83, 0x65, 0xc1, 0x53, 0x11, 0x22, 0x7a, 0xf0, 0xb2,
	0x4c, 0x92, 0x31, 0x06, 0x93, 0x4c, 0xc8, 0x3b, 0x29, 0xbb, 0x5f, 0x41, 0x45, 0xf4, 0x63, 0xf8,
	0x4d, 0xf6, 0xd8, 0xa3, 0x78, 0x08, 0xd2, 0x7e, 0x83, 0x7e, 0x02, 0xc9, 0xff, 0x4a, 0x49, 0xb1,
	0xbd, 0x78, 0x6a, 0xdf, 0x77, 0x7e, 0xef, 0x33, 0x4f, 0x78, 0x1f, 0x06, 0x9f, 0x70, 0x08, 0x39,
	0xf8, 0x40, 0x20, 0x8d, 0x59, 0xf2, 0x3e, 0x48, 0x7d, 0xd7, 0x08, 0xf3, 0x1e, 0x99, 0x0c, 0x6d,
	0x26, 0xe8, 0x90, 0x88, 0x4b, 0x33, 0x4e, 0xb8, 0xe0, 0xf2, 0x61, 0x85, 0x9a, 0x2d, 0x5a, 0x90,
	0xca, 0xbe, 0xc7, 0x3d, 0x5e, 0x30, 0x24, 0xff, 0x57, 0xe2, 0x8a, 0xea, 0x14, 0x3c, 0xb1, 0x29,
	0xb0, 0x46, 0xcc, 0xe1, 0x7e, 0x54, 0x9e, 0xeb, 0x5f, 0x10, 0x56, 0xc6, 0xe0, 0xbd, 0x6e, 0xc5,
	0x5e, 0x41, 0xc8, 0xcf, 0x59, 0xc0, 0x3c, 0x2a, 0x98, 0x7c, 0x82, 0xfb, 0xc0, 0x22, 0x97, 0x25,
	0x03, 0x74, 0x1f, 0x3d, 0xdc, 0x19, 0xed, 0x2d, 0x32, 0x6d, 0xf7, 0x8a, 0x86, 0xc1, 0x13, 0xbd,
	0xec, 0xeb, 0x56, 0x05, 0xc8, 0x8f, 0xf0, 0xde, 0x84, 0x06, 0xbe, 0x4b, 0x05, 0x4f, 0x2e, 0xa8,
	0xeb, 0x26, 0x0c, 0x60, 0x70, 0x23, 0x9f, 0xb2, 0x6e, 0x37, 0x07, 0x2f, 0xca, 0xbe, 0x7c, 0x80,
	0xfb, 0x34, 0xe4, 0x69, 0x24, 0x06, 0xbd, 0x82, 0xa8, 0x2a, 0xfd, 0x08, 0xeb, 0xdd, 0x6e, 0x2c,
	0x06, 0x31, 0x8f, 0x80, 0xe9, 0x5f, 0x11, 0xbe, 0xb7, 0x8a, 0xbd, 0x89, 0xdc, 0xff, 0x65, 0xfb,
	0x18, 0x1f, 0xad, 0xf3, 0xd3, 0x18, 0xff, 0x81, 0xf0, 0xcd, 0x31, 0x78, 0x16, 0xb3, 0x69, 0x40,
	0x23, 0x67, 0x23, 0xa3, 0x11, 0xbe, 0x95, 0xd4, 0x73, 0x17, 0x09, 0x15, 0xac, 0x74, 0x39, 0x7a,
	0x79, 0x9d, 0x69, 0xd2, 0xaf, 0x4c, 0x3b, 0xf6, 0x7c, 0xf1, 0x21, 0xb5, 0x4d, 0x87, 0x87, 0xa4,
	0x5a, 0x7a, 0xf9, 0x63, 0x80, 0xfb, 0x91, 0x88, 0xab, 0x98, 0x81, 0x79, 0xce, 0x9c, 0x45, 0xa6,
	0xdd, 0x29, 0x2f, 0xf8, 0x5b, 0x4d, 0xb7, 0x76, 0x9b, 0x86, 0x95, 0xd7, 0x07, 0x78, 0x7f, 0xd9,
	0x6a, 0xfd, 0x0d, 0x8f, 0x3f, 0xf5, 0x70, 0x6f, 0x0c, 0x9e, 0xfc, 0x19, 0xe1, 0xc3, 0xae, 0xd8,
	0x9c, 0x9a, 0x1d, 0x29, 0x35, 0xbb, 0xb7, 0xab, 0x3c, 0xdd, 0x62, 0xa8, 0x76, 0x25, 0x7f, 0x47,
	0xf8, 0x6e, 0x77, 0x1e, 0xce, 0x36, 0x90, 0x6e, 0xc7, 0x94, 0xe7, 0x5b, 0x8d, 0x35, 0x9e, 0x28,
	0xde, 0x69, 0x37, 0xfd, 0x60, 0x9d, 0x56, 0x83, 0x29, 0xc6, 0x3f, 0x61, 0xf5, 0x15, 0xa3, 0xb7,
	0xd7, 0x33, 0x15, 0x4d, 0x67, 0x2a, 0xfa, 0x3d, 0x53, 0xd1, 0xb7, 0xb9, 0x2a, 0x4d, 0xe7, 0xaa,
	0xf4, 0x73, 0xae, 0x4a, 0xef, 0x9e, 0x2d, 0xc5, 0xa1, 0x92, 0x34, 0x02, 0x6a, 0x43, 0x5d, 0x90,
	0xc9, 0xf0, 0x8c, 0x5c, 0xae, 0x3e, 0x38, 0x45, 0x50, 0xec, 0x7e, 0xf1, 0x3a, 0x9c, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0xc7, 0x59, 0x27, 0x99, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Execute superfluid delegation for a lockup
	SuperfluidmOsmoDelegate(ctx context.Context, in *MsgSuperfluidmOsmoDelegate, opts ...grpc.CallOption) (*MsgSuperfluidmOsmoDelegateResponse, error)
	// Execute superfluid undelegation for a lockup
	SuperfluidmOsmoUndelegate(ctx context.Context, in *MsgSuperfluidmOsmoUndelegate, opts ...grpc.CallOption) (*MsgSuperfluidmOsmoUndelegateResponse, error)
	Rebalance(ctx context.Context, in *MsgRebalance, opts ...grpc.CallOption) (*MsgRebalanceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SuperfluidmOsmoDelegate(ctx context.Context, in *MsgSuperfluidmOsmoDelegate, opts ...grpc.CallOption) (*MsgSuperfluidmOsmoDelegateResponse, error) {
	out := new(MsgSuperfluidmOsmoDelegateResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluidmosmo.Msg/SuperfluidmOsmoDelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SuperfluidmOsmoUndelegate(ctx context.Context, in *MsgSuperfluidmOsmoUndelegate, opts ...grpc.CallOption) (*MsgSuperfluidmOsmoUndelegateResponse, error) {
	out := new(MsgSuperfluidmOsmoUndelegateResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluidmosmo.Msg/SuperfluidmOsmoUndelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Rebalance(ctx context.Context, in *MsgRebalance, opts ...grpc.CallOption) (*MsgRebalanceResponse, error) {
	out := new(MsgRebalanceResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluidmosmo.Msg/Rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Execute superfluid delegation for a lockup
	SuperfluidmOsmoDelegate(context.Context, *MsgSuperfluidmOsmoDelegate) (*MsgSuperfluidmOsmoDelegateResponse, error)
	// Execute superfluid undelegation for a lockup
	SuperfluidmOsmoUndelegate(context.Context, *MsgSuperfluidmOsmoUndelegate) (*MsgSuperfluidmOsmoUndelegateResponse, error)
	Rebalance(context.Context, *MsgRebalance) (*MsgRebalanceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SuperfluidmOsmoDelegate(ctx context.Context, req *MsgSuperfluidmOsmoDelegate) (*MsgSuperfluidmOsmoDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidmOsmoDelegate not implemented")
}
func (*UnimplementedMsgServer) SuperfluidmOsmoUndelegate(ctx context.Context, req *MsgSuperfluidmOsmoUndelegate) (*MsgSuperfluidmOsmoUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidmOsmoUndelegate not implemented")
}
func (*UnimplementedMsgServer) Rebalance(ctx context.Context, req *MsgRebalance) (*MsgRebalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SuperfluidmOsmoDelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSuperfluidmOsmoDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SuperfluidmOsmoDelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluidmosmo.Msg/SuperfluidmOsmoDelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SuperfluidmOsmoDelegate(ctx, req.(*MsgSuperfluidmOsmoDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SuperfluidmOsmoUndelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSuperfluidmOsmoUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SuperfluidmOsmoUndelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluidmosmo.Msg/SuperfluidmOsmoUndelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SuperfluidmOsmoUndelegate(ctx, req.(*MsgSuperfluidmOsmoUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRebalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluidmosmo.Msg/Rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Rebalance(ctx, req.(*MsgRebalance))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.superfluidmosmo.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuperfluidmOsmoDelegate",
			Handler:    _Msg_SuperfluidmOsmoDelegate_Handler,
		},
		{
			MethodName: "SuperfluidmOsmoUndelegate",
			Handler:    _Msg_SuperfluidmOsmoUndelegate_Handler,
		},
		{
			MethodName: "Rebalance",
			Handler:    _Msg_Rebalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/superfluid-mosmo/v1beta1/tx.proto",
}

func (m *MsgSuperfluidmOsmoDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSuperfluidmOsmoDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSuperfluidmOsmoDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSuperfluidmOsmoDelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSuperfluidmOsmoDelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSuperfluidmOsmoDelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSuperfluidmOsmoUndelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSuperfluidmOsmoUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSuperfluidmOsmoUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSuperfluidmOsmoUndelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSuperfluidmOsmoUndelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSuperfluidmOsmoUndelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRebalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRebalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRebalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RebalanceRate.Size()
		i -= size
		if _, err := m.RebalanceRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRebalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRebalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRebalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSuperfluidmOsmoDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSuperfluidmOsmoDelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSuperfluidmOsmoUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSuperfluidmOsmoUndelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRebalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RebalanceRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRebalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSuperfluidmOsmoDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSuperfluidmOsmoDelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoDelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSuperfluidmOsmoUndelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoUndelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoUndelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSuperfluidmOsmoUndelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoUndelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSuperfluidmOsmoUndelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRebalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRebalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRebalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebalanceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RebalanceRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRebalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRebalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRebalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
