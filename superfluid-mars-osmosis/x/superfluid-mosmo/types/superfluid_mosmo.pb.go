// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/superfluid-mosmo/superfluid_mosmo.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SuperfluidmOsmoIntermediaryAccount struct {
	// Denom indicates the denom of the superfluid asset.
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ValAddr string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	// perpetual gauge for rewards distribution
	/// Maybe below is unnecessary or at least, it's not suitable for the mOSMO intermediary account
	GaugeId uint64 `protobuf:"varint,3,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (m *SuperfluidmOsmoIntermediaryAccount) Reset()         { *m = SuperfluidmOsmoIntermediaryAccount{} }
func (m *SuperfluidmOsmoIntermediaryAccount) String() string { return proto.CompactTextString(m) }
func (*SuperfluidmOsmoIntermediaryAccount) ProtoMessage()    {}
func (*SuperfluidmOsmoIntermediaryAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d39fe3a96f3e85, []int{0}
}
func (m *SuperfluidmOsmoIntermediaryAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidmOsmoIntermediaryAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidmOsmoIntermediaryAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidmOsmoIntermediaryAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidmOsmoIntermediaryAccount.Merge(m, src)
}
func (m *SuperfluidmOsmoIntermediaryAccount) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidmOsmoIntermediaryAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidmOsmoIntermediaryAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidmOsmoIntermediaryAccount proto.InternalMessageInfo

func (m *SuperfluidmOsmoIntermediaryAccount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SuperfluidmOsmoIntermediaryAccount) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *SuperfluidmOsmoIntermediaryAccount) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

type SuperfluidmOsmoDelegationRecord struct {
	DelegatorAddress       string      `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress       string      `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegationAmount       types.Coin  `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
	EquivalentStakedAmount *types.Coin `protobuf:"bytes,4,opt,name=equivalent_staked_amount,json=equivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"equivalent_staked_amount,omitempty"`
}

func (m *SuperfluidmOsmoDelegationRecord) Reset()         { *m = SuperfluidmOsmoDelegationRecord{} }
func (m *SuperfluidmOsmoDelegationRecord) String() string { return proto.CompactTextString(m) }
func (*SuperfluidmOsmoDelegationRecord) ProtoMessage()    {}
func (*SuperfluidmOsmoDelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_93d39fe3a96f3e85, []int{1}
}
func (m *SuperfluidmOsmoDelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidmOsmoDelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidmOsmoDelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidmOsmoDelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidmOsmoDelegationRecord.Merge(m, src)
}
func (m *SuperfluidmOsmoDelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidmOsmoDelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidmOsmoDelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidmOsmoDelegationRecord proto.InternalMessageInfo

func (m *SuperfluidmOsmoDelegationRecord) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *SuperfluidmOsmoDelegationRecord) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SuperfluidmOsmoDelegationRecord) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

func (m *SuperfluidmOsmoDelegationRecord) GetEquivalentStakedAmount() *types.Coin {
	if m != nil {
		return m.EquivalentStakedAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*SuperfluidmOsmoIntermediaryAccount)(nil), "osmosis.superfluidmosmo.SuperfluidmOsmoIntermediaryAccount")
	proto.RegisterType((*SuperfluidmOsmoDelegationRecord)(nil), "osmosis.superfluidmosmo.SuperfluidmOsmoDelegationRecord")
}

func init() {
	proto.RegisterFile("osmosis/superfluid-mosmo/superfluid_mosmo.proto", fileDescriptor_93d39fe3a96f3e85)
}

var fileDescriptor_93d39fe3a96f3e85 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xb1, 0xce, 0xd3, 0x30,
	0x18, 0x4c, 0x7e, 0x0a, 0x85, 0xb0, 0x94, 0xa8, 0x82, 0xb4, 0x43, 0x5a, 0x75, 0xa1, 0x52, 0xd5,
	0x58, 0x05, 0xb1, 0xb1, 0xa4, 0xb0, 0x74, 0x42, 0x6a, 0x25, 0x06, 0x96, 0xc8, 0x89, 0x4d, 0xb0,
	0x9a, 0xf8, 0x0b, 0xb6, 0x13, 0xe8, 0xc6, 0x23, 0xf0, 0x1c, 0x3c, 0x49, 0xc7, 0x8e, 0x4c, 0x80,
	0xda, 0x87, 0x60, 0x45, 0xb1, 0xd3, 0xb4, 0xc0, 0x80, 0x98, 0x12, 0xdf, 0x9d, 0xbf, 0x3b, 0x7f,
	0x3a, 0x07, 0x81, 0xcc, 0x41, 0x32, 0x89, 0x64, 0x59, 0x50, 0xf1, 0x36, 0x2b, 0x19, 0x99, 0xe7,
	0x35, 0x76, 0x05, 0x44, 0x1a, 0x08, 0x0a, 0x01, 0x0a, 0xdc, 0x47, 0xcd, 0x85, 0xe0, 0xc2, 0x6b,
	0x7a, 0xd8, 0x4f, 0x21, 0x05, 0xad, 0x41, 0xf5, 0x9f, 0x91, 0x0f, 0xfd, 0x44, 0xeb, 0x51, 0x8c,
	0x25, 0x45, 0xd5, 0x22, 0xa6, 0x0a, 0x2f, 0x50, 0x02, 0x8c, 0x1b, 0x7e, 0x52, 0x38, 0x93, 0xcd,
	0x65, 0xd0, 0x2b, 0x99, 0xc3, 0x8a, 0x2b, 0x2a, 0x72, 0x4a, 0x18, 0x16, 0xbb, 0x30, 0x49, 0xa0,
	0xe4, 0xca, 0xed, 0x3b, 0xb7, 0x09, 0xe5, 0x90, 0x7b, 0xf6, 0xd8, 0x9e, 0xde, 0x5b, 0x9b, 0x83,
	0x3b, 0x70, 0xee, 0x56, 0x38, 0x8b, 0x30, 0x21, 0xc2, 0xbb, 0xd1, 0x44, 0xb7, 0xc2, 0x59, 0x48,
	0x88, 0xa8, 0xa9, 0x14, 0x97, 0x29, 0x8d, 0x18, 0xf1, 0x6e, 0x8d, 0xed, 0x69, 0x67, 0xdd, 0xd5,
	0xe7, 0x15, 0x99, 0xfc, 0xbc, 0x71, 0x46, 0x7f, 0x58, 0xbe, 0xa4, 0x19, 0x4d, 0xb1, 0x62, 0xc0,
	0xd7, 0x34, 0x01, 0x41, 0xdc, 0x99, 0xf3, 0x80, 0x18, 0x0c, 0x84, 0x9e, 0x4f, 0xa5, 0x6c, 0xbc,
	0x7b, 0x2d, 0x11, 0x1a, 0xbc, 0x16, 0x57, 0x38, 0x63, 0xe4, 0x37, 0xb1, 0xc9, 0xd3, 0x6b, 0x89,
	0xb3, 0xf8, 0x43, 0x3b, 0x99, 0x01, 0x8f, 0x70, 0x5e, 0x3f, 0x4f, 0x27, 0xbc, 0xff, 0x64, 0x10,
	0x98, 0x5d, 0x05, 0xf5, 0xae, 0x82, 0x66, 0x57, 0xc1, 0x0b, 0x60, 0x7c, 0x89, 0xf6, 0xdf, 0x46,
	0xd6, 0x97, 0xef, 0xa3, 0xc7, 0x29, 0x53, 0xef, 0xca, 0x38, 0x48, 0x20, 0x47, 0xcd, 0x62, 0xcd,
	0x67, 0x2e, 0xc9, 0x16, 0xa9, 0x5d, 0x41, 0xa5, 0xbe, 0xd0, 0xa6, 0x64, 0xc0, 0x43, 0xed, 0xe1,
	0x7e, 0xb2, 0x1d, 0x8f, 0xbe, 0x2f, 0x59, 0x85, 0x33, 0xca, 0x55, 0x24, 0x15, 0xde, 0x52, 0x72,
	0x0e, 0xd0, 0xf9, 0x57, 0x80, 0xd9, 0xff, 0x98, 0x3f, 0xbc, 0xf8, 0x6c, 0xb4, 0x8d, 0x89, 0xb0,
	0x7c, 0xbd, 0x3f, 0xfa, 0xf6, 0xe1, 0xe8, 0xdb, 0x3f, 0x8e, 0xbe, 0xfd, 0xf9, 0xe4, 0x5b, 0x87,
	0x93, 0x6f, 0x7d, 0x3d, 0xf9, 0xd6, 0x9b, 0xe7, 0x57, 0xa3, 0x9b, 0x7e, 0xcd, 0x33, 0x1c, 0xcb,
	0xb6, 0x9d, 0xd5, 0xe2, 0x19, 0xfa, 0xf8, 0x77, 0x47, 0xb5, 0x69, 0x7c, 0x47, 0x57, 0xe9, 0xe9,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xf6, 0x2a, 0x64, 0xcc, 0x02, 0x00, 0x00,
}

func (m *SuperfluidmOsmoIntermediaryAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidmOsmoIntermediaryAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidmOsmoIntermediaryAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GaugeId != 0 {
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidmOsmoDelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidmOsmoDelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidmOsmoDelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EquivalentStakedAmount != nil {
		{
			size, err := m.EquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintSuperfluidMosmo(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuperfluidMosmo(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuperfluidMosmo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuperfluidmOsmoIntermediaryAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSuperfluidMosmo(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovSuperfluidMosmo(uint64(l))
	}
	if m.GaugeId != 0 {
		n += 1 + sovSuperfluidMosmo(uint64(m.GaugeId))
	}
	return n
}

func (m *SuperfluidmOsmoDelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperfluidMosmo(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperfluidMosmo(uint64(l))
	}
	l = m.DelegationAmount.Size()
	n += 1 + l + sovSuperfluidMosmo(uint64(l))
	if m.EquivalentStakedAmount != nil {
		l = m.EquivalentStakedAmount.Size()
		n += 1 + l + sovSuperfluidMosmo(uint64(l))
	}
	return n
}

func sovSuperfluidMosmo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuperfluidMosmo(x uint64) (n int) {
	return sovSuperfluidMosmo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SuperfluidmOsmoIntermediaryAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluidMosmo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidmOsmoIntermediaryAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidmOsmoIntermediaryAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluidMosmo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidmOsmoDelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluidMosmo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidmOsmoDelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidmOsmoDelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquivalentStakedAmount == nil {
				m.EquivalentStakedAmount = &types.Coin{}
			}
			if err := m.EquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluidMosmo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluidMosmo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperfluidMosmo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperfluidMosmo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluidMosmo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuperfluidMosmo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuperfluidMosmo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuperfluidMosmo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuperfluidMosmo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperfluidMosmo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuperfluidMosmo = fmt.Errorf("proto: unexpected end of group")
)
